
bisection ( f, a, b, tol, nmax ) { 
    New ( "n" = Const 1 ) In { 
        While ( Operator ( Leq, Identifier "n" , Identifier "nmax" ) ) { 
            New ( "c" = Operator ( Plus, Identifier "a" , Identifier "b" ) ) In { 
                Asg ( Identifier "c" := Operator ( Divide, Identifier "c" , Const 2 ) ) ; 
                If ( Operator ( Or, Operator ( Equal, Application ( Identifier "f" ( Identifier "c" ) ) , Const 0 ) , Operator ( Leq, Operator ( Divide, Operator ( Minus, Identifier "b" , Identifier "a" ) , Const 2 ) , Identifier "tol" ) ) ) { 
                    Return ( Deref ( Identifier "c" ) ) 
                } Else { 
                    empty 
                } ; 
                Asg ( Identifier "n" := Operator ( Plus, Identifier "n" , Const 1 ) ) ; 
                If ( Operator ( Equal, Application ( Identifier "f" ( Identifier "c" ) ) , Application ( Identifier "f" ( Identifier "a" ) ) ) ) { 
                    New ( "a" = Identifier "c" ) In { 
                        empty 
                    } 
                } Else { 
                    New ( "b" = Identifier "c" ) In { 
                        empty 
                    } 
                } 
            } 
        } 
    } 
}

main (  ) { 
    Application ( Identifier "bisection" ( empty ) ) 
}

