bisection ( f, a, b, tol, nmax ) { 
    New ( "n" = Const 1 ) In { 
        While ( Operator ( Leq, "n" , "nmax" ) ) { 
            New ( "c" = Operator ( Plus, "a" , "b" ) ) In { 
                Asg ( "c" := Operator ( Divide, "c" , Const 2 ) ) ; 
                If ( Operator ( Or, Operator ( Equal, Application ( "f" ( "c" ) , Const 0 ) , Operator ( Leq, Operator ( Divide, Operator ( Minus, "b" , "a" ) , Const 2 ) , "tol" ) ) ) { 
                    Deref ( "c" ) 
                } Else { 
                    empty 
                } ; 
                Asg ( "n" := Operator ( Plus, "n" , Const 1 ) ) ; 
                If ( Operator ( Equal, Application ( "f" ( "c" ) , Application ( "f" ( "a" ) ) ) { 
                    Asg ( "a" := "c" ) 
                } Else { 
                    Asg ( "b" := "c" ) 
                } 
            } 
        } 
    } 
}
